const Discord = require('discord.js')

// TODO substituir por 'alunos_ti_a.json' => o arquivo estÃ¡ com alguns problemas de codificaÃ§Ã£o (carcteres especiais), Ã© necessÃ¡rio corrÃ­gÃ­-los, grande maioria jÃ¡ corrigida
const data = require('../../data/')

//array de dados capturados atravÃ©s da coversa com o bot
const userData = {
    course: '',
    ra: '',
    birthDate: '',
}

// inteligÃªncia de chat: reconhecimento e termos semelhantes porÃ©m nÃ£o exatos (nice to have! - nÃ£o estÃ¡ implementado ainda)
const possibilities = {
    autenticate = ["autentica", "autenticar", "autenticaÃ§Ã£o", "autenticar-me"],
    courses = [
        ["Sistemas de InformaÃ§Ã£o", "Sistema de InformaÃ§Ã£o", "Sistemas de InformaÃ§ao", "Sistemas de Informacao", "Sistema de Informacao"],
        [],
        [],
        [],
        [],
        []
    ]
}

// inicio da conversa de autenticaÃ§Ã£o
module.exports = client => {
    client.on('message', msg => {
        if ((msg.content.toLowerCase().indexOf('autenticar') !== -1
        || msg.content.toLowerCase().indexOf('autenticaÃ§Ã£o') !== -1)) {
            if(msg.channel.type == 'dm') {
                msg.reply("OlÃ¡, sou Cody e vou te auxiliar nessa jornada!\nMe informe primeiro em qual curso estÃ¡ matriculado(ex: --curso CiÃªncia da ComputaÃ§Ã£o)")
                getCourse(client)
            } else {
                console.log(msg)
                msg.reply("nÃ³s nÃ£o podemos fazer esse procedimento por aqui, ele Ã© sigiloso ðŸ¤«\nMe chame no privado para que eu possa te ajudar melhor ðŸ˜‰")
            }
        }
    });
}

// mÃ©todo para capturar o curso do usuÃ¡rio
const getCourse = (client) => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--curso") != -1) {
                let temp = msg.content.split(" ")
                userData.course = temp[temp.length-1]
                console.log(userData)
                msg.reply("Qual o nÃºmero da sua matrÃ­cula/RA (ex: --ra 01234567)?")
                getRA(client)
            } else {
                msg.reply("getCourse")
            }
        }
    });
}

// mÃ©todo para capturar o RA do usuÃ¡rio
const getRA = (client) => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--ra") != -1) {
                let temp = msg.content.split(" ")
                userData.ra = temp[temp.length-1]
                console.log(userData)
                msg.reply("Qual a sua data de nascimento? (ex: --dn 01/01/2000)")
                getBirthDate(client)
            } else {
                msg.reply("getRA")
            }
        }
    });
}

// mÃ©todo para capturar a data de nascimento do usuÃ¡rio
const getBirthDate = (client) => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--dn") != -1) {
                let temp = msg.content.split(" ")
                userData.dn = temp[temp.length-1]
                console.log(userData)
                validate(client, msg.channel)
            } else {
                msg.reply("getBirth")
            }
        }
    });
}

const validate = (client, channel) => {
    for (let i=0; i<data.page1.length; i++) {
        if (data.page1[i].course == userData.course) {
            if (data.page1[i].ra == userData.ra) {
                if (data.page1[i].bd == userData.birthDate) {
                    return console.log("certooo") //TA DANDO ERRO AQUI
                } else {
                    console.log("dn errado")
                }
            } else {
                console.log("aluno inexistente, tente novamente.")
            }
        } else {
            console.log("curso inexistente, tente novamente.")
        }
    }
}