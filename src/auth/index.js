const Discord = require('discord.js')

const config = require('../config.json')
// TODO substituir por 'alunos_ti_a.json' => o arquivo estÃ¡ com alguns problemas de codificaÃ§Ã£o (carcteres especiais), Ã© necessÃ¡rio corrÃ­gÃ­-los, grande maioria jÃ¡ corrigida
const data = require('../../data/')

// 

//array de dados capturados atravÃ©s da coversa com o bot
const userData = {
    course: null,
    ra: null,
    bd: null,
}

// inteligÃªncia de chat: reconhecimento e termos semelhantes porÃ©m nÃ£o exatos (nice to have! - nÃ£o estÃ¡ implementado ainda)
// const possibilities = {
//     autenticate = ["autentica", "autenticar", "autenticaÃ§Ã£o", "autenticar-me"],
//     courses = [
//         ["Sistemas de InformaÃ§Ã£o", "Sistema de InformaÃ§Ã£o", "Sistemas de InformaÃ§ao", "Sistemas de InformacÃ£o","Sistemas de Informacao", "Sistema de InformaÃ§ao", "Sistema de InformacÃ£o","Sistema de Informacao"],
//         ["CiÃªncia da ComputaÃ§Ã£o","Ciencia da ComputaÃ§ao","Ciencia da ComputacÃ£o","Ciencia da Computacao","CiÃªncia da ComputacÃ£o","CiÃªncia da ComputaÃ§ao","CiÃªncia","Ciencia"],
//         ["ADS","AnÃ¡lise e Desenvolvimento de Sistemas","Analise e Desenvolvimento de Sistemas"],
//         ["Sistemas para Internet","Sistemas de Internet","Sistemas da Internet","Sistemas para a Internet"],
//         ["Defesa CibernÃ©tica","Defesa Cibernetica","Defesa Cyber"],
//         ["Engenharia da ComputaÃ§Ã£o","Engenharia da ComputaÃ§ao", "Engenharia da Computacao","Engenharia da ComputacÃ£o",]
//         ["GestÃ£o de Tecnologia da InformaÃ§Ã£o","GestÃ£o de Tecnologia da InformaÃ§ao","GestÃ£o de Tecnologia da InformacÃ£o","GestÃ£o de Tecnologia da Informacao","GestÃ£o","Gestao","GestÃ£o de Tecnologia de InformaÃ§Ã£o","GestÃ£o de Tecnologia de InformaÃ§ao","GestÃ£o de Tecnologia de InformacÃ£o","GestÃ£o de Tecnologia de Informacao"],
//         ["Redes de Computadores","Redes"],
//         ["SeguranÃ§a da InformaÃ§Ã£o","Seguranca da InformaÃ§Ã£o","Seguranca da InformacÃ£o","Seguranca da Informacao","Seguranca da InformaÃ§ao","SeguranÃ§a da Informacao","SeguranÃ§a da InformacÃ£o","SeguranÃ§a de InformaÃ§Ã£o","Seguranca de InformaÃ§Ã£o","Seguranca de InformacÃ£o","Seguranca de Informacao","Seguranca de InformaÃ§ao","SeguranÃ§a de Informacao","SeguraÃ§a de InformacÃ£o"],
//         ["Banco de Dados","BD"],
//         ["Jogos Digitais"]
//     ]
// }

// inicio da conversa de autenticaÃ§Ã£o
module.exports = client => {
    client.on('message', msg => {
        if ((msg.content.toLowerCase().indexOf('autenticar') >= 0
        || msg.content.toLowerCase().indexOf('autenticaÃ§Ã£o') >= 0)) {
            if(msg.channel.type == 'dm') {
                msg.reply("OlÃ¡, sou Cody e vou te auxiliar nessa jornada!\nMe informe primeiro em qual curso estÃ¡ matriculado(ex: --curso CiÃªncia da ComputaÃ§Ã£o)")
            } else {
                msg.reply("nÃ³s nÃ£o podemos fazer esse procedimento por aqui, ele Ã© sigiloso ðŸ¤«\nMe chame no privado para que eu possa te ajudar melhor ðŸ˜‰")
            }
        }
    });
    getCourse(client)
    getRA(client)
    getBirthDate(client)
}



// mÃ©todo para capturar o curso do usuÃ¡rio
const getCourse = client => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--curso") != -1) {
                let temp = msg.content.split(" ")
                userData.course = temp[temp.length-1]
                console.log(userData)
                msg.reply("Qual o nÃºmero da sua matrÃ­cula/RA (ex: --ra 01234567)?")
            }
        }
    });
}

// mÃ©todo para capturar o RA do usuÃ¡rio
const getRA = client => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--ra") != -1) {
                let temp = msg.content.split(" ")
                userData.ra = temp[temp.length-1]
                console.log(userData)
                msg.reply("Qual a sua data de nascimento? (ex: --dn 01-01-2000)")
            }
        }
    });
}

// mÃ©todo para capturar a data de nascimento do usuÃ¡rio
const getBirthDate = client => {
    client.on('message', msg => {
        if (msg.author != client.user) {
            if(msg.content.indexOf("--dn") != -1) {
                let temp = msg.content.split(" ")
                userData.bd = temp[temp.length-1]
                console.log(userData)
                validate(client, msg.author.id)
            }
        }
    });
}

const validate = (client, userId) => {
    for (let i=0; i<data.page1.length; i++) {
        if (data.page1[i].course === userData.course) {
            if (data.page1[i].ra === userData.ra) {
                if (data.page1[i].bd === userData.bd) {
                    acess(client, userId)
                } else {
                    console.log("dn errado")
                }
            } else {
                console.log("aluno inexistente, tente novamente.")
            }
        } else {
            console.log("curso inexistente, tente novamente.")
        }
    }
}

const acess = (client, userId) => {
    let role =  client.guilds.cache.find(g => g.id === config.guild.id).roles.cache.find(role => role.id === config.guild.roles.aluno)
    let member = client.guilds.cache.find(g => g.id === config.guild.id).members.cache.find(m => m.id === userId)

    console.log("user: ", member.addRole(role)) //mÃ©todo "invÃ¡lido"/"inexistente"
}

// const verifyPossibilities = (content, possibilities) => {
//     for (let i = 0; i<possibilities.length; i++)
//         for (let j = 0; j<possibilities[i].length; i++)
//             if(content.toLowerCase().indexOf(possibilities[i][j].toLowerCase()) != -1)
//                 return true
            
//     return false
// }

// atribuir um novo cargo para a pessoa e assim ter acesso aos canais